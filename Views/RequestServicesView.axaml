<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="clr-namespace:RequestServices_Ivanov.ViewModels"
             mc:Ignorable="d"  d:DesignWidth="800" d:DesignHeight="450"
             x:Class="RequestServices_Ivanov.Views.RequestServicesView"
             x:DataType="vm:RequestServicesViewModel"
             DataContext="RequestServicesViewModel"
             FontSize="12" FontFamily="Arial">
  <UserControl.DataContext>
    <vm:RequestServicesViewModel/>
</UserControl.DataContext>
  <Grid ColumnDefinitions="*,*,*,Auto,Auto" RowDefinitions="Auto,Auto,Auto,*" Margin="15">
    <!-- Фильтр по наименованию техники, привязали к соответсвующему свойству -->
    <TextBox Text="{Binding FilterEquipment}" Margin="0 10 0 0" Grid.Row="1" Watermark="Поиск оборудования..."/>
    <!-- Фильтр по Фио клиента -->
    <TextBox Text="{Binding FilterClient}" Margin="10 10 0 0" Grid.Column="1" Grid.Row="1" Watermark="Поиск клиента..."/>
    <!-- Фильтр по Фио исполнителя -->
    <TextBox Text="{Binding FilterExecutor}" Margin="0 10 0 0" Grid.Row="2" Watermark="Поиск специалиста..."/>
    <!-- Фильтр по статусу, в нём коллекцию элементом мы привязали в массиву Statuses в представлении модели
    Grid.Column="1" Grid.Row="2" SelectedItem="{Binding SelectedStatus}" ItemsSource="{Binding Statuses}"/>
    а выбранный элемент к  -->
    <ComboBox Margin="10 10 0 0" HorizontalAlignment="Stretch" 
    Grid.Column="1" Grid.Row="2" SelectedItem="{Binding SelectedStatus}" ItemsSource="{Binding Statuses}"/>
    <!-- Кнопка очистить фильтр -->
    <Button Grid.Column="2" Grid.Row="1" 
            VerticalAlignment="Stretch"
            Margin="10 10 0 0" CornerRadius="5"
            HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
            Command="{Binding ClearFilterCommand}">Очистить фильтр</Button>
    <!-- Кнопка добавления заявки -->
    <Button Grid.Column="2" Grid.Row="2" 
            VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
            Margin="10 10 0 0" CornerRadius="10"
            HorizontalContentAlignment="Center" VerticalContentAlignment="Center"
            FontSize="16" Background="PaleGreen" FontWeight="Bold" 
            Command="{Binding ShowAddOrChangeViewCommand}">Добавить заявку</Button>
    <DockPanel Grid.Column="0" Grid.ColumnSpan="5" Grid.Row="4">
      <!-- Панель с отображением страниц и кнопок навигации -->
      <StackPanel HorizontalAlignment="Right" Margin="0 10" DockPanel.Dock="Top" Orientation="Horizontal">
        <StackPanel Orientation="Horizontal" Spacing="2" Margin="0 0 5 0" >
          <TextBlock Text="{Binding FilterRequests.Count}" VerticalAlignment="Center" />
          <TextBlock Text="из" VerticalAlignment="Center" />
          <TextBlock Text="{Binding CountRows}" VerticalAlignment="Center" />
        </StackPanel>
        <!-- Коды &lt; и &gt; позволяют установить в качестве текста символы < и > -->
        <Button Command="{Binding PrevPage}" Margin="0 0 5 0" Content="&lt;" />
        <TextBlock VerticalAlignment="Center" Margin="0 0 6 0" Text="{Binding Page}"/>
        <Button Command="{Binding NextPage}" Content="&gt;"/>
      </StackPanel>

      <!-- Таблица с данными, коллекцию строк привязали к свойству FilterRequests, выключили редактирование пользователем строк -->
      <DataGrid x:Name="RequestDataGrid" Margin="0 10 0 0"  
                CanUserReorderColumns="False" IsReadOnly="True" CanUserResizeColumns="True" 
                ItemsSource="{Binding FilterRequests}" AutoGenerateColumns="False"  >
        <!-- Описание каждого столбца -->
        <DataGrid.Columns>
          <!-- Значения привязываем к свойствам класса Request, так как это будет строкой -->
          <DataGridTextColumn IsVisible="False" Header="ID" Binding="{Binding Idrequest}"/>
          <DataGridTextColumn Width="Auto" Header="Дата добавления" Binding="{Binding DateAdd}"/>
          <DataGridTextColumn Width="Auto" Header="Приоритет" Binding="{Binding Priority}"/>
          <!-- По пути из техники выбираем её наименование и т.д -->
          <DataGridTextColumn Width="Auto" Header="оборудование" Binding="{Binding IdequipmentNavigation.Title}"/>
          <DataGridTextColumn Width="Auto" Header="Клиент" Binding="{Binding IdclientNavigation.IduserNavigation.Fio}"/>
          <DataGridTextColumn Width="Auto" Header="Техническая команда" Binding="{Binding IdexecutorNavigation.IduserNavigation.Fio}"/>
          <DataGridTextColumn Width="Auto" Header="Статус" Binding="{Binding Status}"/>
          <DataGridTextColumn Width="Auto" Header="Комментарий" Binding="{Binding Comment}"/>
        </DataGrid.Columns>

        <!-- Описание контекстного меню по нажатию ПКМ -->
        <DataGrid.ContextMenu>
          <ContextMenu>
            <MenuItem Header="Изменить" Command="{Binding Change}" CommandParameter="{Binding #RequestDataGrid.SelectedItem}"/>
            <MenuItem Header="Удалить" Command="{Binding DeleteRequest}" CommandParameter="{Binding #RequestDataGrid.SelectedItem}"/>
          </ContextMenu>
        </DataGrid.ContextMenu>
      </DataGrid>
    </DockPanel>
    <!-- Линия разделения двух элементов, позволяем динамически изменять размер, видимость привязали к видимости панели Grid с x:Name="content" -->
    <GridSplitter IsVisible="{Binding #content.IsVisible}" BorderBrush="PaleGreen" BorderThickness="1" Grid.Column="3" Grid.RowSpan="4" Background="Gray" ResizeDirection="Columns" />
    <Grid x:Name="content" IsVisible="{Binding IsVisibilityView}" Background="White" Grid.Column="4" Grid.RowSpan="4" >
        <!-- В этой панели будет отображаться представление добавления или изменения заявки -->
        <ContentControl Content="{Binding CurrentView}"/>
    </Grid>
  </Grid>             

</UserControl>
